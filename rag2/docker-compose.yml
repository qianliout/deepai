version: '3.8'

services:
  # PostgreSQL with pgvector extension
  postgres:
    image: pgvector/pgvector:pg16
    container_name: rag2_postgres
    environment:
      POSTGRES_DB: rag2_db
      POSTGRES_USER: rag2_user
      POSTGRES_PASSWORD: rag2_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/sql/init_postgresql.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - rag2_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rag2_user -d rag2_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MySQL for dialogue history
  mysql:
    image: mysql:8.0
    container_name: rag2_mysql
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: rag2_dialogue
      MYSQL_USER: rag2_user
      MYSQL_PASSWORD: rag2_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./deployment/sql/init_mysql.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - rag2_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: rag2_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./deployment/docker/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - rag2_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: rag2_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - rag2_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Neo4j for knowledge graph
  neo4j:
    image: neo4j:5.14
    container_name: rag2_neo4j
    environment:
      NEO4J_AUTH: neo4j/rag2_password
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - ./deployment/neo4j:/var/lib/neo4j/import
    networks:
      - rag2_network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "rag2_password", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Ollama for development LLM
  ollama:
    image: ollama/ollama:latest
    container_name: rag2_ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - rag2_network
    environment:
      - OLLAMA_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
  mysql_data:
  redis_data:
  es_data:
  neo4j_data:
  neo4j_logs:
  ollama_data:

networks:
  rag2_network:
    driver: bridge
